@inject UserSessionState Session

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">HealthPortal.Frontend</a>

        <div class="d-flex align-items-center">
            @if (Session.IsAuthenticated)
            {
                <span class="text-white me-3">Welcome, @Session.Username (@Session.Role)</span>
                <button class="btn btn-sm btn-outline-light" @onclick="LogOut">Logout</button>
            }
            else
            {
                <span class="text-white me-3">Not logged in</span>
            }

            <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
                <span class="navbar-toggler-icon"></span>
            </button>
        </div>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="nav flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Counter
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="weather">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Weather
            </NavLink>
        </div>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override void OnInitialized()
    {
        Session.OnChange += StateHasChanged;
    }

    private void LogOut()
    {
        Session.ClearUser();
    }

    public void Dispose()
    {
        Session.OnChange -= StateHasChanged;
    }
}
